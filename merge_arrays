#!/bin/bash
# Copyright (c) 2015, Redmaner

# Define bash colors for Mac OSX / Linux
case `uname -s` in
    Darwin) 
           txtrst='\033[0m' # Color off
           txtred='\033[0;31m' # Red
           txtgrn='\033[0;32m' # Green
           txtblu='\033[0;34m' # Blue
           ;;
    *)
           txtrst='\e[0m' # Color off
           txtred='\e[0;31m' # Red
           txtgrn='\e[0;32m' # Green
           txtblu='\e[0;36m' # Blue
           ;;
esac

up=$PWD
if [ ! -f $up/bools ]; then
	echo -e "ERROR: bools file not detected\nCopy bools.default to bools and edit it to your needs\nThen run merge again"; exit
else
	source $up/bools
fi

MergeArrays () {
mkdir -p $new_array_dir
grep '<array\|<integer-array\|<string-array' $orig_array | uniq --unique | while read array; do

	array_type=$(echo $array | cut -d'<' -f2 | cut -d' ' -f1)
	array_name=$(echo $array | cut -d'"' -f2)

	if [ $(sed -e '/name="'$array_name'"/!d' $targ_array | wc -l) -gt 0 ]; then
		if [ $(sed -e '/name="'$array_name'"/!d' $targ_array | grep '/>' | wc -l) -gt 0 ]; then
			sed -e '/<'$array_type' name="'$array_name'"/!d' $targ_array >> $new_array; continue
		else
			sed -e '/<'$array_type' name="'$array_name'"/,/'$array_type'>/!d' $targ_array >> $new_array; continue
		fi
	else
		if [ $(sed -e '/name="'$array_name'"/!d' $orig_array | grep '/>' | wc -l) -gt 0 ]; then
			sed -e '/<'$array_type' name="'$array_name'"/!d' $orig_array >> $new_array; continue
		else	
			sed -e '/<'$array_type' name="'$array_name'"/,/'$array_type'>/!d' $orig_array >> $new_array; continue
		fi
	fi
done
if [ $dual_merge == true ]; then
	grep '<array\|<integer-array\|<string-array' $orig_array_second | uniq --unique | while read array; do

		array_type=$(echo $array | cut -d'<' -f2 | cut -d' ' -f1)
		array_name=$(echo $array | cut -d'"' -f2)

		if [ $(sed -e '/name="'$array_name'"/!d' $orig_array | wc -l) -gt 0 ]; then
			continue
		elif [ $(sed -e '/name="'$array_name'"/!d' $targ_array | wc -l) -gt 0 ]; then
			if [ $(sed -e '/name="'$array_name'"/!d' $targ_array | grep '/>' | wc -l) -gt 0 ]; then
				sed -e '/<'$array_type' name="'$array_name'"/!d' $targ_array >> $new_array; continue
			else
				sed -e '/<'$array_type' name="'$array_name'"/,/'$array_type'>/!d' $targ_array >> $new_array; continue
			fi
		else
			if [ $(sed -e '/name="'$array_name'"/!d' $orig_array_second | grep '/>' | wc -l) -gt 0 ]; then
				sed -e '/<'$array_type' name="'$array_name'"/!d' $orig_array_second >> $new_array; continue
			else	
				sed -e '/<'$array_type' name="'$array_name'"/,/'$array_type'>/!d' $orig_array_second >> $new_array; continue
			fi
		fi
	done
fi

if [ -s $new_array ]; then
	echo -e "<?xml version='1.0' encoding='UTF-8'?>\n<resources>" > $new_array_final
	cat $new_array >> $new_array_final
	echo '</resources>' >> $new_array_final
	rm -f $new_array
	echo -e "${txtblu}>> Merged ${txtgrn}arrays${txtrst} $apk_file to $new_array_final"
fi
}

ShowHelp () {
echo -e "
Script requires three arguments
First argument: path to original arrays.xml
Second argument: path to target arrays.xml
Third argument: path to new arrays.xml
Fourth argument: apk name
"
exit
}

if [ -f "$1" ]; then 
	orig_array=$1	
else
	ShowHelp; exit
fi
if [ -f "$2" ]; then 
	targ_array=$2
else
	ShowHelp; exit
fi
if [ "$3" != "" ]; then 
	new_array=$3.new
	new_array_final=$3
	new_array_dir=$(dirname $new_array)
else
	ShowHelp; exit
fi	
if [ "$4" != "" ]; then
	apk_file=$4
else
	ShowHelp; exit
fi

if [ "$5" != "" ]; then
	untranslateable_list=$5
else
	untranslateable_list=undefined
fi

if [ "$6" != "" ]; then
	dual_merge=$6
fi

if [ "$7" != "" ]; then
	orig_array_second=$7
fi

MergeArrays
