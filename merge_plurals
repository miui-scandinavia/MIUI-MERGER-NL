#!/bin/bash
# Copyright (c) 2015, Redmaner

# Define bash colors for Mac OSX / Linux
case `uname -s` in
    Darwin) 
           txtrst='\033[0m' # Color off
           txtred='\033[0;31m' # Red
           txtgrn='\033[0;32m' # Green
           txtblu='\033[0;34m' # Blue
           ;;
    *)
           txtrst='\e[0m' # Color off
           txtred='\e[0;31m' # Red
           txtgrn='\e[0;32m' # Green
           txtblu='\e[0;36m' # Blue
           ;;
esac

up=$PWD

MergePlurals () {
mkdir -p $new_plural_dir
grep '<plurals' $orig_plural | uniq --unique | while read plural; do

	plural_type=$(echo $plural | cut -d'<' -f2 | cut -d' ' -f1)
	plural_name=$(echo $plural | cut -d'"' -f2)

	if [ $(sed -e '/name="'$plural_name'"/!d' $targ_plural | wc -l) -gt 0 ]; then
		if [ $(sed -e '/name="'$plural_name'"/!d' $targ_plural | grep '/>' | wc -l) -gt 0 ]; then
			sed -e '/<'$plural_type' name="'$plural_name'"/!d' $targ_plural >> $new_plural; continue
		else
			sed -e '/<'$plural_type' name="'$plural_name'"/,/'$plural_type'>/!d' $targ_plural >> $new_plural; continue
		fi
	else
		if [ $(sed -e '/name="'$plural_name'"/!d' $orig_plural | grep '/>' | wc -l) -gt 0 ]; then
			sed -e '/<'$plural_type' name="'$plural_name'"/!d' $orig_plural >> $new_plural; continue
		else	
			sed -e '/<'$plural_type' name="'$plural_name'"/,/'$plural_type'>/!d' $orig_plural >> $new_plural; continue
		fi
	fi
done

if [ "$dual_merge" == true ]; then

	grep '<plurals' $orig_plural_second | uniq --unique | while read plural; do

		plural_type=$(echo $plural | cut -d'<' -f2 | cut -d' ' -f1)
		plural_name=$(echo $plural | cut -d'"' -f2)

		if [ $(sed -e '/name="'$plural_name'"/!d' $orig_plural | wc -l) -gt 0 ]; then
			continue
		elif [ $(sed -e '/name="'$plural_name'"/!d' $targ_plural | wc -l) -gt 0 ]; then
			if [ $(sed -e '/name="'$plural_name'"/!d' $targ_plural | grep '/>' | wc -l) -gt 0 ]; then
				sed -e '/<'$plural_type' name="'$plural_name'"/!d' $targ_plural >> $new_plural; continue
			else
				sed -e '/<'$plural_type' name="'$plural_name'"/,/'$plural_type'>/!d' $targ_plural >> $new_plural; continue
			fi
		else
			if [ $(sed -e '/name="'$plural_name'"/!d' $orig_plural_second | grep '/>' | wc -l) -gt 0 ]; then
				sed -e '/<'$plural_type' name="'$plural_name'"/!d' $orig_plural_second >> $new_plural; continue
			else	
				sed -e '/<'$plural_type' name="'$plural_name'"/,/'$plural_type'>/!d' $orig_plural_second >> $new_plural; continue
			fi
		fi
	done
fi

if [ -s $new_plural ]; then
	echo -e "<?xml version='1.0' encoding='UTF-8'?>\n<resources>" > $new_plural_final
	cat $new_plural >> $new_plural_final
	echo '</resources>' >> $new_plural_final
	rm -f $new_plural
	echo -e "${txtblu}>> Merged ${txtgrn}plurals${txtrst} $apk_file to $new_plural_final"
fi
}

ShowHelp () {
echo -e "
Script requires three arguments
First argument: path to original plurals.xml
Second argument: path to target plurals.xml
Third argument: path to new plurals.xml
Fourth argument: apk name
"
exit
}

if [ -f "$1" ]; then 
	orig_plural=$1	
else
	ShowHelp; exit
fi
if [ -f "$2" ]; then 
	targ_plural=$2
else
	ShowHelp; exit
fi
if [ "$3" != "" ]; then 
	new_plural=$3.new
	new_plural_final=$3
	new_plural_dir=$(dirname $new_plural)
else
	ShowHelp; exit
fi	
if [ "$4" != "" ]; then
	apk_file=$4
else
	ShowHelp; exit
fi

if [ "$5" != "" ]; then
	untranslateable_list=$5
else
	untranslateable_list=undefined
fi

if [ "$6" != "" ]; then
	dual_merge=$6
fi

if [ "$7" != "" ]; then
	orig_plural_second=$7
fi

MergePlurals
