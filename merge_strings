#!/bin/bash
# Copyright (c) 2014, Redmaner

# Define bash colors for Mac OSX / Linux
case `uname -s` in
    Darwin) 
           txtrst='\033[0m' # Color off
           txtred='\033[0;31m' # Red
           txtgrn='\033[0;32m' # Green
           txtblu='\033[0;34m' # Blue
           ;;
    *)
           txtrst='\e[0m' # Color off
           txtred='\e[0;31m' # Red
           txtgrn='\e[0;32m' # Green
           txtblu='\e[0;36m' # Blue
           ;;
esac

up=$PWD
if [ ! -f $up/bools ]; then
	echo -e "ERROR: bools file not detected\nCopy bools.default to bools and edit it to your needs\nThen run merge again"; exit
else
	source $up/bools
fi

MergeStrings () {
mkdir -p $new_string_dir
echo -e "<?xml version='1.0' encoding='UTF-8'?>
<resources>" > $new_string
sed -e '/string name="/!d' $orig_string | cut -d'"' -f2 | uniq --unique | while read string_name; do
	if [ $(sed -e '/name="'$string_name'"/!d' $targ_string | wc -l) -gt 0 ]; then
		if [ $(sed -e '/name="'$string_name'"/!d' $targ_string | grep '</string>' | wc -l) -gt 0 ]; then
			sed -e '/<string name="'$string_name'"/!d' $targ_string >> $new_string; continue
		elif [ $(sed -e '/name="'$string_name'"/!d' $targ_string | grep '/>' | wc -l) -gt 0 ]; then
			sed -e '/<string name="'$string_name'"/!d' $targ_string >> $new_string; continue
		else
			sed -e '/<string name="'$string_name'"/,/string>/!d' $targ_string >> $new_string; continue
		fi
	else
		if [ $(sed -e '/name="'$string_name'"/!d' $orig_string | grep '</string>' | wc -l) -gt 0 ]; then
			sed -e '/<string name="'$string_name'"/!d' $orig_string >> $new_string; continue
		elif [ $(sed -e '/name="'$string_name'"/!d' $orig_string | grep '/>' | wc -l) -gt 0 ]; then
			sed -e '/<string name="'$string_name'"/!d' $orig_string >> $new_string; continue
		else	
			sed -e '/<string name="'$string_name'"/,/string>/!d' $orig_string >> $new_string; continue
		fi
	fi
done
if [ $dual_merge == true ]; then
	sed -e '/string name="/!d' $orig_string_second| cut -d'"' -f2 | uniq --unique | while read string_name; do
		if [ $(sed -e '/name="'$string_name'"/!d' $orig_string | wc -l) -gt 0 ]; then
			continue
		elif [ $(sed -e '/name="'$string_name'"/!d' $targ_string | wc -l) -gt 0 ]; then
			if [ $(sed -e '/name="'$string_name'"/!d' $targ_string | grep '</string>' | wc -l) -gt 0 ]; then
				sed -e '/<string name="'$string_name'"/!d' $targ_string >> $new_string; continue
			elif [ $(sed -e '/name="'$string_name'"/!d' $targ_string | grep '/>' | wc -l) -gt 0 ]; then
				sed -e '/<string name="'$string_name'"/!d' $targ_string >> $new_string; continue
			else
				sed -e '/<string name="'$string_name'"/,/string>/!d' $targ_string >> $new_string; continue
			fi
		else
			if [ $(sed -e '/name="'$string_name'"/!d' $orig_string_second | grep '</string>' | wc -l) -gt 0 ]; then
				sed -e '/<string name="'$string_name'"/!d' $orig_string_second >> $new_string; continue
			elif [ $(sed -e '/name="'$string_name'"/!d' $orig_string_second | grep '/>' | wc -l) -gt 0 ]; then
				sed -e '/<string name="'$string_name'"/!d' $orig_string_second >> $new_string; continue
			else	
				sed -e '/<string name="'$string_name'"/,/string>/!d' $orig_string_second >> $new_string; continue
			fi
		fi
	done
fi
echo '</resources>' >> $new_string
#$python $up/sort.py $new_string_dir > /dev/null
echo -e "${txtblu}>> Merged ${txtgrn}strings${txtrst} $apk_file to $new_string"
}

ShowHelp () {
echo -e "
Script requires three arguments
First argument: path to original strings.xml
Second argument: path to target strings.xml
Third argument: path to new strings.xml
Fourth argument: apk name
"
exit
}

if [ -f "$1" ]; then 
	orig_string=$1	
else
	ShowHelp; exit
fi
if [ -f "$2" ]; then 
	targ_string=$2
else
	ShowHelp; exit
fi
if [ "$3" != "" ]; then 
	new_string=$3
	new_string_dir=$(dirname $new_string)
else
	ShowHelp; exit
fi	
if [ "$4" != "" ]; then
	apk_file=$4
else
	ShowHelp; exit
fi

if [ "$5" != "" ]; then
	untranslateable_list=$5
else
	untranslateable_list=undefined
fi

if [ "$6" != "" ]; then
	dual_merge=$6
fi

if [ "$7" != "" ]; then
	orig_string_second=$7
fi

MergeStrings
