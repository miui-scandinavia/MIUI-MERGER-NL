#!/bin/bash

UNTRANSLATEABLE_LIST=$untranslateable_list
AUTO_IGNORELIST=$auto_ignorelist
LANG_VERSION=$lang_version
source $value_catcher

xml_remove_string () {
STRING_NAME=$1
if [ $(sed -e '/name="'$STRING_NAME'"/!d' $XML_TARGET | wc -l) -gt 0 ]; then
	#echo "Cleaning $XML_TARGET"
	if [ $(sed -e '/name="'$STRING_NAME'"/!d' $XML_TARGET | grep '</string>' | wc -l) -gt 0 ]; then
		sed -e '/<string name="'$STRING_NAME'"/d' $XML_TARGET >> $XML_TARGET.fixed; mv $XML_TARGET.fixed $XML_TARGET
	elif [ $(sed -e '/name="'$STRING_NAME'"/!d' $XML_TARGET | grep '/>' | wc -l) -gt 0 ]; then
		sed -e '/<string name="'$STRING_NAME'"/d' $XML_TARGET >> $XML_TARGET.fixed; mv $XML_TARGET.fixed $XML_TARGET
	else
		sed -e '/<string name="'$STRING_NAME'"/,/string>/d' $XML_TARGET >> $XML_TARGET.fixed; mv $XML_TARGET.fixed $XML_TARGET
	fi
fi
}

xml_remove_array () {
ARRAY_NAME=$1
ARRAY_TYPE=$(cat $XML_TARGET | grep 'name="'$ARRAY_NAME'"' | cut -d'<' -f2 | cut -d' ' -f1)
if [ $(sed -e '/name="'$ARRAY_NAME'"/!d' $XML_TARGET | wc -l) -gt 0 ]; then
	#echo "Cleaning $XML_TARGET"
	sed -e '/name="'$ARRAY_NAME'"/,/'$ARRAY_TYPE'/d' $XML_TARGET >> $XML_TARGET.fixed; mv $XML_TARGET.fixed $XML_TARGET
fi
}

arrays_parse () {
TARGET_ARRAY=$1
TARGET_ARRAY_TYPE=$2
TARGET_FILE=$3
case "$TARGET_ARRAY_TYPE" in
	string-array) sed -e '/name="'$TARGET_ARRAY'"/,/string-array/!d' $TARGET_FILE;;
	array) sed -e '/name="'$TARGET_ARRAY'"/,/array/!d' $TARGET_FILE;;
esac
}

init_list () {
ITEM_FOLDER=$1
ITEM_APP=$2
ITEM_FILE=$3
ITEM_NAME=$4
}

xml_fix_untranslateable () {
# Fix untranslateable strings, arrays, plurals using ignorelist
if [ $(cat $UNTRANSLATEABLE_LIST | grep ''$APK' '$XML_TYPE' ' | wc -l) -gt 0 ]; then
	case "$XML_TYPE" in
		arrays.xml)
		cat $UNTRANSLATEABLE_LIST | grep 'all '$APK' '$XML_TYPE' ' | while read all_line; do
			init_list $(cat $UNTRANSLATEABLE_LIST | grep "$all_line")
			xml_remove_array ''$ITEM_NAME''
		done 
		cat $UNTRANSLATEABLE_LIST | grep ''$DIR' '$APK' '$XML_TYPE' ' | while read all_line; do
			init_list $(cat $UNTRANSLATEABLE_LIST | grep "$all_line")
			xml_remove_array ''$ITEM_NAME''
		done;;

		strings.xml)
		cat $UNTRANSLATEABLE_LIST | grep 'all '$APK' '$XML_TYPE' ' | while read all_line; do
			init_list $(cat $UNTRANSLATEABLE_LIST | grep "$all_line")
			xml_remove_string ''$ITEM_NAME''
		done 
		cat $UNTRANSLATEABLE_LIST | grep ''$DIR' '$APK' '$XML_TYPE' ' | while read all_line; do
			init_list $(cat $UNTRANSLATEABLE_LIST | grep "$all_line")
			xml_remove_string ''$ITEM_NAME''
		done;;
	esac
fi

# Check for untranslateable strings and arrays due automatically search for @
case "$XML_TYPE" in 
	strings.xml) cat $XML_TARGET | grep '@android\|@string\|@color\|@drawable\|@null\|@array' | cut -d'>' -f1 | cut -d'"' -f2 | while read auto_search_target; do
				if [ $(cat $AUTO_IGNORELIST | grep 'folder="all" application="'$APK'" file="'$XML_TYPE'" name="'$auto_search_target'"/>' | wc -l) == 0 ]; then
					xml_remove_string ''$auto_search_target''; continue
				else
					continue
				fi
				if [ $(cat $AUTO_IGNORELIST | grep 'folder="'$DIR'" application="'$APK'" file="'$XML_TYPE'" name="'$auto_search_target'"/>' | wc -l) == 0 ]; then
					xml_remove_string ''$auto_search_target''; continue
				else
					continue
				fi
		     done;;
	 arrays.xml) cat $XML_TARGET | grep 'name="' | while read arrays; do
				ARRAY_TYPE=$(echo $arrays | cut -d'<' -f2 | cut -d' ' -f1)
				ARRAY_NAME=$(echo $arrays | cut -d'>' -f1 | cut -d'"' -f2)
				if [ $(arrays_parse $ARRAY_NAME $ARRAY_TYPE $XML_TARGET | grep '@android\|@string\|@color\|@drawable\|@null\|@array' | wc -l) -gt 0 ]; then
					if [ $(cat $AUTO_IGNORELIST | grep 'folder="all" application="'$APK'" file="'$XML_TYPE'" name="'$ARRAY_NAME'"' | wc -l) -eq 0 ]; then
						xml_remove_array ''$ARRAY_NAME''; continue
					else
						continue
					fi
					if [ $(cat $AUTO_IGNORELIST | grep 'folder="'$DIR'" application="'$APK'" file="'$XML_TYPE'" name="'$ARRAY_NAME'"' | wc -l) -eq 0 ]; then
						xml_remove_array ''$ARRAY_NAME''; continue
					else
						continue
					fi
				fi
		     done;;
esac

# Catch values with the values catcher list
if [ $LANG_VERSION -ge 8 ]; then
	case "$XML_TYPE" in
		arrays.xml)
		catch_values_arrays | while read value_entry; do
			cat $XML_TARGET | grep 'name="' | cut -d'"' -f2 | grep "$value_entry" | while read catched_entry; do
				if [ $(cat $AUTO_IGNORELIST | grep 'folder="all" application="'$APK'" file="'$XML_TYPE'" name="'$catched_entry'"/>' | wc -l) == 0 ]; then
					xml_remove_array ''$catched_entry''; continue
				else
					continue
				fi
				if [ $(cat $AUTO_IGNORELIST | grep 'folder="'$DIR'" application="'$APK'" file="'$XML_TYPE'" name="'$catched_entry'"/>' | wc -l) == 0 ]; then
					xml_remove_array ''$catched_entry''; continue
				else
					continue
				fi
			done 
		done;;

		strings.xml)
		catch_values_strings | while read value_entry; do
			cat $XML_TARGET | grep 'name="' | cut -d'"' -f2 | grep "$value_entry" | while read catched_entry; do
				if [ $(cat $AUTO_IGNORELIST | grep 'folder="all" application="'$APK'" file="'$XML_TYPE'" name="'$catched_entry'"/>' | wc -l) == 0 ]; then
					xml_remove_string ''$catched_entry''; continue
				else
					continue
				fi
				if [ $(cat $AUTO_IGNORELIST | grep 'folder="'$DIR'" application="'$APK'" file="'$XML_TYPE'" name="'$catched_entry'"/>' | wc -l) == 0 ]; then
					xml_remove_string ''$catched_entry''; continue
				else
					continue
				fi
			done 
		done;;
	esac
fi
}

echo -e "${txtblu}\nPost cleaning${txtrst}"
find $new_dir -iname "*.apk" | sort | while read apk_target; do
	APK=$(basename $apk_target)
	DIR=$(basename $(dirname $apk_target))
	find $apk_target -iname "arrays.xml*" -o -iname "strings.xml*" -o -iname "plurals.xml*" | while read XML_TARGET; do
		if [ -e "$XML_TARGET" ]; then
			XML_TYPE=$(basename $XML_TARGET)

			# Fix .part files for XML_TYPE
			if [ $(echo $XML_TYPE | grep ".part" | wc -l) -gt 0 ]; then
				case "$XML_TYPE" in
		   			strings.xml.part) XML_TYPE="strings.xml";;
					arrays.xml.part) XML_TYPE="arrays.xml";;
					plurals.xml.part) XML_TYPE="plurals.xml";;
				esac
			fi

			xml_fix_untranslateable
		fi
	done
done
wait
